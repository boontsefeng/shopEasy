package com.shopeasy.shopeasy.controller;

import com.shopeasy.shopeasy.dao.RegistrationKeyDAO;
import com.shopeasy.shopeasy.dao.UserDAO;
import com.shopeasy.shopeasy.model.RegistrationKey;
import com.shopeasy.shopeasy.model.User;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.util.List;

/**
 * Controller for manager-specific functionality
 */
@WebServlet(urlPatterns = {
        "/admin/staff", 
        "/admin/staff/add", 
        "/admin/staff/edit", 
        "/admin/staff/delete",
        "/admin/customers",
        "/admin/customer/edit",
        "/admin/customer/delete",
        "/admin/keys",
        "/admin/keys/generate",
        "/admin/keys/delete"
})
public class ManagerController extends HttpServlet {
    private UserDAO userDAO;
    private RegistrationKeyDAO keyDAO;
    
    @Override
    public void init() throws ServletException {
        super.init();
        userDAO = new UserDAO();
        keyDAO = new RegistrationKeyDAO();
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String path = request.getServletPath();
        
        // Check if user is logged in and has manager role
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        User user = (User) session.getAttribute("user");
        // Only managers can access these endpoints
        if (!"manager".equals(user.getRole())) {
            response.sendRedirect(request.getContextPath() + "/dashboard");
            return;
        }
        
        switch (path) {
            case "/manager/staff":
                // Get all staff members and display them
                List<User> staffList = userDAO.getUsersByRole("staff");
                request.setAttribute("staffList", staffList);
                request.getRequestDispatcher("/view/admin/staff-management.jsp").forward(request, response);
                break;
                
            case "/manager/staff/add":
                // Forward to add staff page
                request.getRequestDispatcher("/view/admin/add-staff.jsp").forward(request, response);
                break;
                
            case "/manager/staff/edit":
                // Get staff member by ID and forward to edit page
                handleEditStaff(request, response);
                break;
                
            case "/manager/staff/delete":
                // Delete staff member
                handleDeleteStaff(request, response);
                break;
                
            case "/manager/customers":
                // Get all customers and display them
                List<User> customerList = userDAO.getUsersByRole("customer");
                request.setAttribute("customerList", customerList);
                request.getRequestDispatcher("/view/admin/customer-management.jsp").forward(request, response);
                break;
                
            case "/manager/customer/edit":
                // Get customer by ID and forward to edit page
                handleEditCustomer(request, response);
                break;
                
            case "/manager/customer/delete":
                // Delete customer
                handleDeleteCustomer(request, response);
                break;
                
            case "/manager/keys":
                // Get all registration keys generated by this manager
                List<RegistrationKey> keyList = keyDAO.getActiveKeysByManager(user.getUserId());
                request.setAttribute("keyList", keyList);
                request.getRequestDispatcher("/view/admin/key-management.jsp").forward(request, response);
                break;
                
            case "/manager/keys/delete":
                // Delete a registration key
                handleDeleteKey(request, response, user.getUserId());
                break;
                
            default:
                response.sendRedirect(request.getContextPath() + "/dashboard");
                break;
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String path = request.getServletPath();
        
        // Check if user is logged in and has manager role
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        User user = (User) session.getAttribute("user");
        // Only managers can access these endpoints
        if (!"manager".equals(user.getRole())) {
            response.sendRedirect(request.getContextPath() + "/dashboard");
            return;
        }
        
        switch (path) {
            case "/manager/staff/add":
                // Add new staff member
                handleAddStaff(request, response);
                break;
                
            case "/manager/staff/edit":
                // Update existing staff member
                handleUpdateStaff(request, response);
                break;
                
            case "/manager/customer/edit":
                // Update existing customer
                handleUpdateCustomer(request, response);
                break;
                
            case "/manager/keys/generate":
                // Generate a new registration key
                handleGenerateKey(request, response, user.getUserId());
                break;
                
            default:
                response.sendRedirect(request.getContextPath() + "/dashboard");
                break;
        }
    }
    
    /**
     * Handle edit staff member request
     */
    private void handleEditStaff(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userIdStr = request.getParameter("id");
        if (userIdStr != null && !userIdStr.isEmpty()) {
            try {
                int userId = Integer.parseInt(userIdStr);
                User staff = userDAO.getUserById(userId);
                if (staff != null && "staff".equals(staff.getRole())) {
                    request.setAttribute("staff", staff);
                    request.getRequestDispatcher("/view/admin/edit-staff.jsp").forward(request, response);
                    return;
                }
            } catch (NumberFormatException e) {
                // Invalid user ID
            }
        }
        // Redirect to staff management page if staff not found or ID is invalid
        response.sendRedirect(request.getContextPath() + "/manager/staff");
    }
    
    /**
     * Handle delete staff member request
     */
    private void handleDeleteStaff(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String userIdStr = request.getParameter("id");
        if (userIdStr != null && !userIdStr.isEmpty()) {
            try {
                int userId = Integer.parseInt(userIdStr);
                User staff = userDAO.getUserById(userId);
                if (staff != null && "staff".equals(staff.getRole())) {
                    boolean success = userDAO.deleteUser(userId);
                    if (success) {
                        response.sendRedirect(request.getContextPath() + "/manager/staff?success=deleted");
                        return;
                    }
                }
            } catch (NumberFormatException e) {
                // Invalid user ID
            }
        }
        // Redirect with error if deletion failed or ID was invalid
        response.sendRedirect(request.getContextPath() + "/manager/staff?error=deletefailed");
    }
    
    /**
     * Handle add staff member request
     */
    private void handleAddStaff(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Get form data
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String contactNumber = request.getParameter("contactNumber");
        
        // Check if username already exists
        if (userDAO.usernameExists(username)) {
            request.setAttribute("error", "Username already exists");
            request.getRequestDispatcher("/view/admin/add-staff.jsp").forward(request, response);
            return;
        }
        
        // Create new staff user
        User newStaff = new User();
        newStaff.setUsername(username);
        newStaff.setPassword(password); // Note: In production, use proper password hashing
        newStaff.setRole("staff");
        newStaff.setName(name);
        newStaff.setEmail(email);
        newStaff.setContactNumber(contactNumber);
        
        int userId = userDAO.createUser(newStaff);
        
        if (userId > 0) {
            // Staff added successfully
            response.sendRedirect(request.getContextPath() + "/manager/staff?success=added");
        } else {
            // Failed to add staff
            request.setAttribute("error", "Failed to add staff member");
            request.getRequestDispatcher("/view/admin/add-staff.jsp").forward(request, response);
        }
    }
    
    /**
     * Handle update staff member request
     */
    private void handleUpdateStaff(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Get form data
        int userId = 0;
        try {
            userId = Integer.parseInt(request.getParameter("userId"));
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manager/staff?error=invalid");
            return;
        }
        
        // Get existing staff user
        User staff = userDAO.getUserById(userId);
        if (staff == null || !"staff".equals(staff.getRole())) {
            response.sendRedirect(request.getContextPath() + "/manager/staff?error=notfound");
            return;
        }
        
        // Update staff information
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String contactNumber = request.getParameter("contactNumber");
        String password = request.getParameter("password");
        
        // Only update password if provided
        if (password != null && !password.trim().isEmpty()) {
            staff.setPassword(password); // Note: In production, use proper password hashing
        }
        
        staff.setName(name);
        staff.setEmail(email);
        staff.setContactNumber(contactNumber);
        
        // Save updated staff
        boolean success = userDAO.updateUser(staff);
        
        if (success) {
            // Staff updated successfully
            response.sendRedirect(request.getContextPath() + "/manager/staff?success=updated");
        } else {
            // Failed to update staff
            request.setAttribute("error", "Failed to update staff member");
            request.setAttribute("staff", staff);
            request.getRequestDispatcher("/view/admin/edit-staff.jsp").forward(request, response);
        }
    }
    
    /**
     * Handle edit customer request
     */
    private void handleEditCustomer(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userIdStr = request.getParameter("id");
        if (userIdStr != null && !userIdStr.isEmpty()) {
            try {
                int userId = Integer.parseInt(userIdStr);
                User customer = userDAO.getUserById(userId);
                if (customer != null && "customer".equals(customer.getRole())) {
                    request.setAttribute("customer", customer);
                    request.getRequestDispatcher("/view/admin/edit-customer.jsp").forward(request, response);
                    return;
                }
            } catch (NumberFormatException e) {
                // Invalid user ID
            }
        }
        // Redirect to customer management page if customer not found or ID is invalid
        response.sendRedirect(request.getContextPath() + "/manager/customers");
    }
    
    /**
     * Handle delete customer request
     */
    private void handleDeleteCustomer(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String userIdStr = request.getParameter("id");
        if (userIdStr != null && !userIdStr.isEmpty()) {
            try {
                int userId = Integer.parseInt(userIdStr);
                User customer = userDAO.getUserById(userId);
                if (customer != null && "customer".equals(customer.getRole())) {
                    boolean success = userDAO.deleteUser(userId);
                    if (success) {
                        response.sendRedirect(request.getContextPath() + "/manager/customers?success=deleted");
                        return;
                    }
                }
            } catch (NumberFormatException e) {
                // Invalid user ID
            }
        }
        // Redirect with error if deletion failed or ID was invalid
        response.sendRedirect(request.getContextPath() + "/manager/customers?error=deletefailed");
    }
    
    /**
     * Handle update customer request
     */
    private void handleUpdateCustomer(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Get form data
        int userId = 0;
        try {
            userId = Integer.parseInt(request.getParameter("userId"));
        } catch (NumberFormatException e) {
            response.sendRedirect(request.getContextPath() + "/manager/customers?error=invalid");
            return;
        }
        
        // Get existing customer
        User customer = userDAO.getUserById(userId);
        if (customer == null || !"customer".equals(customer.getRole())) {
            response.sendRedirect(request.getContextPath() + "/manager/customers?error=notfound");
            return;
        }
        
        // Update customer information
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String contactNumber = request.getParameter("contactNumber");
        String password = request.getParameter("password");
        
        // Only update password if provided
        if (password != null && !password.trim().isEmpty()) {
            customer.setPassword(password); // Note: In production, use proper password hashing
        }
        
        customer.setName(name);
        customer.setEmail(email);
        customer.setContactNumber(contactNumber);
        
        // Save updated customer
        boolean success = userDAO.updateUser(customer);
        
        if (success) {
            // Customer updated successfully
            response.sendRedirect(request.getContextPath() + "/manager/customers?success=updated");
        } else {
            // Failed to update customer
            request.setAttribute("error", "Failed to update customer");
            request.setAttribute("customer", customer);
            request.getRequestDispatcher("/view/admin/edit-customer.jsp").forward(request, response);
        }
    }
    
    /**
     * Handle generate registration key request
     */
    private void handleGenerateKey(HttpServletRequest request, HttpServletResponse response, int managerId) throws IOException {
        String role = request.getParameter("role");
        String validDaysStr = request.getParameter("validDays");
        
        // Validate role
        if (!"manager".equals(role) && !"staff".equals(role)) {
            response.sendRedirect(request.getContextPath() + "/manager/keys?error=invalidrole");
            return;
        }
        
        // Validate valid days
        int validDays = 7; // Default to 7 days
        if (validDaysStr != null && !validDaysStr.isEmpty()) {
            try {
                validDays = Integer.parseInt(validDaysStr);
                if (validDays <= 0) {
                    validDays = 7;
                }
            } catch (NumberFormatException e) {
                // Use default value
            }
        }
        
        // Generate key
        String keyValue = keyDAO.generateKey(role, managerId, validDays);
        
        if (keyValue != null) {
            // Key generated successfully
            response.sendRedirect(request.getContextPath() + "/manager/keys?success=generated&key=" + keyValue);
        } else {
            // Failed to generate key
            response.sendRedirect(request.getContextPath() + "/manager/keys?error=generatefailed");
        }
    }
    
    /**
     * Handle delete registration key request
     */
    private void handleDeleteKey(HttpServletRequest request, HttpServletResponse response, int managerId) throws IOException {
        String keyIdStr = request.getParameter("id");
        if (keyIdStr != null && !keyIdStr.isEmpty()) {
            try {
                int keyId = Integer.parseInt(keyIdStr);
                boolean success = keyDAO.deleteKey(keyId, managerId);
                if (success) {
                    response.sendRedirect(request.getContextPath() + "/manager/keys?success=deleted");
                    return;
                }
            } catch (NumberFormatException e) {
                // Invalid key ID
            }
        }
        // Redirect with error if deletion failed or ID was invalid
        response.sendRedirect(request.getContextPath() + "/manager/keys?error=deletefailed");
    }
}